# Descrição da Ideia Original 

A ideia original foi a alteração das regras de comando_sem_rotulo para adição do desvio ao caso fosse achado um goto, adição da regra de parte_declaração_rotulos e inclusão na regra de bloco do programa. 
Tivemos que alterar a regra de parte_declaracao_rotulos para quebrar em subregras que auxiliam a percorrer a lista_de_rotulos, pois é possível declarar múltiplos rótulos após o token LABEL. 
 

# Trechos do Código Alterados 
As alterações realizadas estão listadas abaixo conforme diferenças entre arquivo originais e alterados, foram realizadas alterações nos arquivos compilador.y e tabela_simb.h, conforme segue abaixo.

## Alteração arquivo tabela_simb.h 
Adicionado símbolo de label nos tipos definidos para a tabela de símbolos no arquivo tabela_simb.h. 

## Alterações realizadas no arquivo compilador.y 

Adição da REGRA 3 - parte de declaração de rótulos, a qual também foi inserida na regra REGRA 02 - bloco. 

<               parte_declara_rotulo

< /*
<    REGRA 3
<    <parte de declarações de rótulos> ::=
<       label <número> {, <número>}; 
< */
< parte_declara_rotulo:
<    LABEL lista_labels PONTO_E_VIRGULA| comando_vazio
<             ;

Adição de regras auxiliares para declaração de uma lista de rótulos na chamada label: 

< lista_labels: lista_labels VIRGULA ident_labels
< | ident_labels;
< 
< ident_labels:  NUMERO 
<                {
<                   s = cria_simbolo(token, LABEL_S, nivel_lex, ti); 
<                   insere_tabela(&ts, s);
<                };

Adição das regras de desvio e label_goto na  REGRA 18 - comando_sem_rotulo. 

comando_sem_rotulo: 
                  atribuicao_proc
<                 | label_goto 
<                 | desvio 
                  | comando_composto
                  | comando_condicional
                  | comando_repetitivo 
                  | escrita
                  | leitura


Adição de regra label_goto para a declaração da label que efetua o goto para o NUMERO do token passado entre a lista de rotulos posterior ao token LABEL. 
< label_goto: 
<       NUMERO
<       {
<       sptr = busca_simbolo(&ts, token);
<       if(!sptr){
<          fprintf(stderr, "ERRO:\n Rotulo do goto nao existe\n"); 
<          exit(1);
<       }
<       // ENRT k, n
<       // k é o nível léxico
<       // corrente e n é o número de variáveis locais do procedimento corrente
<       sprintf(buffer_mepa, "ENRT %d, %d", nivel_lex, num_vars);
<       geraCodigo(NULL, buffer_mepa);
<    } DOIS_PONTOS comando_sem_rotulo; 
< 
Adição de regra REGRA 21 - desvio para que quando receber o token GOTO vá para o NUMERO indicado, se declarado e esse estiver acessível no local da chamada. 

<    REGRA 21. 
<       <desvios> ::= goto <número>
< desvio: GOTO NUMERO{
<    sptr = busca_simbolo(&ts, token);
<    if(!sptr){
<       fprintf(stderr, "ERRO: Rótulo do goto não existe!\n"); 
<       exit(1);
<    }
<    if(sptr->nivel > nivel_lex)
<    {
<       fprintf(stderr, "ERRO: Rótulo não encontrado!\n"); 
<       exit(1);
<    }
// Como salvamos o rótulo com o identificar com o token do número recebido após a labelo, utilizamos um atoi do identificador do simbolo buscado e desivamos para o nível que já estava sendo salvo 
// no trabalho Original e o nivel_lex é uma variável global que é incrementada conforme as mudanças de nível léxico. DSVR p=numero,j=nivel_label,k=nivel_lex_atual
<    sprintf(buffer_mepa, "DSVR %d, %d, %d", atoi(sptr->identificador),sptr->nivel, nivel_lex); 
<    geraCodigo(NULL, buffer_mepa);
< } ;

# Maiores Problemas para Fazer Funcionar
O maior problema para fazer funcionar foi o entendimento do funcionamento da declaração, pois inicialmente estávamos pensando em como seria a execução do programa e ficamos pensando em como efetuar as movimentações da pilha para armazenamento dos rótulos armazenados. Além do debug da regra da declaração do rótulos, o que também levou um tempo. 
